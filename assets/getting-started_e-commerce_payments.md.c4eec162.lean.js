import{k as s,F as e,$ as a,W as n,M as o}from"./chunks/framework.e8799e72.js";const t=n('<h1 id="payments" tabindex="-1">Payments <a class="header-anchor" href="#payments" aria-label="Permalink to &quot;Payments&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">Advanced Guide - prior knowledge required</p><p>In order to follow this guide properly, we recommend that you get familiar with the payment flow and payment API concepts first.</p><ul><li><a href="https://developer.shopware.com/docs/concepts/commerce/checkout-concept/payments" target="_blank" rel="noreferrer">Payments Concept</a> - especially <code>asynchronous</code> and <code>synchronous</code> chapters.</li><li><a href="https://shopware.stoplight.io/docs/store-api/8218801e50fe5-handling-the-payment" target="_blank" rel="noreferrer">Payment API</a></li></ul></div><h2 id="synchronous-payment" tabindex="-1">Synchronous Payment <a class="header-anchor" href="#synchronous-payment" aria-label="Permalink to &quot;Synchronous Payment&quot;">​</a></h2><p>Due to the fact the order can be placed without giving any additional payment information (only allowed data is a <code>customer comment</code> and <code>affiliate code</code>), the synchronous payment strongly depends on the specific implementation, and that&#39;s why it does not affect the way how to deal it in the headless client application.</p><p>In this case, the flow looks as follows:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">// the cart contains at least one item added</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> createOrder </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useCheckout</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// create an order from the current Cart</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> order </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createOrder</span><span style="color:#A6ACCD;">(</span><span style="color:#676E95;font-style:italic;">/** optional params omitted */</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// order object on success, unhandled rejection otherwise</span></span>\n<span class="line"></span></code></pre></div><p>Under the hood, once the order is placed, a <a href="https://developer.shopware.com/docs/guides/plugins/plugins/checkout/payment/add-payment-plugin#synchronous-example" target="_blank" rel="noreferrer">PaymentHandler</a> is being invoked to process the payment right away:</p><ul><li>Execute the payment logic (may vary for every payment method / provider)</li><li>Change the payment status according the result from previous step</li></ul><p>In general, the client side does not have any direct control on the sync payment process.</p><h2 id="asynchronous-payment" tabindex="-1">Asynchronous Payment <a class="header-anchor" href="#asynchronous-payment" aria-label="Permalink to &quot;Asynchronous Payment&quot;">​</a></h2><p>Contrary to the sync flow, the asynchronous payment has more options and thus, more control of the payment process.</p><p>This is a better option for those payment providers that would need to pass additional data (like credentials, one time tokens) to complete the payment process.</p><h3 id="external-gateway" tabindex="-1">External gateway <a class="header-anchor" href="#external-gateway" aria-label="Permalink to &quot;External gateway&quot;">​</a></h3><p>To give an example, let&#39;s say we need to implement a payment method which redirects a customer to the external payment gateway. Depending on success or failure, we need to be redirected to success page in case of payment was done properly, otherwise display an error page to the user in our shop page.</p><ol><li><p>Create an order</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> createOrder </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useCheckout</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> refreshCart </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useCart</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>\n<span class="line highlighted"><span style="color:#676E95;font-style:italic;">// create an order</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> order </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createOrder</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span></code></pre></div></li><li><p>Utilize <code>useOrderPayment</code> composable to proceed the payment process once order is placed</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">// utilize useOrderPayment to proceed on the provided order</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> paymentUrl</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> handlePayment</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> isAsynchronous</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> state</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> paymentMethod </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">useOrderPayment</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">ref</span><span style="color:#A6ACCD;">(order))</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span></code></pre></div></li><li><p>Initialize a payment handler</p><p>This is the moment, when any additional information can be passed (if a payment extension allows to do so). Payment handler can communicate with an external service to init some additional process, like preparation of external gateway session to process the payment for specific order.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">// where to redirect an user when payment is done correctly</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> SUCCESS_PAYMENT_URL</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">`${</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">?.</span><span style="color:#A6ACCD;">location</span><span style="color:#89DDFF;">?.</span><span style="color:#A6ACCD;">origin</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">/checkout/success/</span><span style="color:#89DDFF;">${</span><span style="color:#A6ACCD;">orderId</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">/paid</span><span style="color:#89DDFF;">`</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// go to this page otherwise</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> FAILURE_PAYMENT_URL</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">`${</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">?.</span><span style="color:#A6ACCD;">location</span><span style="color:#89DDFF;">?.</span><span style="color:#A6ACCD;">origin</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">/checkout/success/</span><span style="color:#89DDFF;">${</span><span style="color:#A6ACCD;">orderId</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">/unpaid</span><span style="color:#89DDFF;">`</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span>\n<span class="line highlighted"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> handlePaymentResponse </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">handlePayment</span><span style="color:#A6ACCD;">(</span></span>\n<span class="line highlighted"><span style="color:#A6ACCD;">  SUCCESS_PAYMENT_URL</span><span style="color:#89DDFF;">,</span></span>\n<span class="line highlighted"><span style="color:#A6ACCD;">  FAILURE_PAYMENT_URL</span><span style="color:#89DDFF;">,</span></span>\n<span class="line highlighted"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span></span>\n<span class="line highlighted"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">/**</span></span>\n<span class="line highlighted"><span style="color:#676E95;font-style:italic;">     * here goes additional information required by payment provider</span></span>\n<span class="line highlighted"><span style="color:#676E95;font-style:italic;">    * can be payment intent token</span></span>\n<span class="line highlighted"><span style="color:#676E95;font-style:italic;">    */</span></span>\n<span class="line highlighted"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line highlighted"><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span></code></pre></div><p>Note that, this is an example, does not show how to create success/failure pages.</p></li><li><p>Do the action on processed payment handler</p><p>If payment provider (shipped via app/plugin/extension) has external payment gateway, you will probably get the URL to go to.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> handlePaymentResponse </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">handlePayment</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">/* parameters omitted, see previous point */</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> redirectUrl </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> handlePaymentResponse</span><span style="color:#89DDFF;">?.</span><span style="color:#A6ACCD;">redirectUrl</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// URL or undefined</span></span>\n<span class="line"></span></code></pre></div><p>Then you are ready to perform a redirection of an user to the URL in order to finish the payment. If succeed, the customer will be redirected back to <code>SUCCESS_PAYMENT_URL</code> defined before. Otherwise, <code>FAILURE_PAYMENT_URL</code> will be displayed.</p></li></ol><h3 id="credit-cards" tabindex="-1">Credit cards <a class="header-anchor" href="#credit-cards" aria-label="Permalink to &quot;Credit cards&quot;">​</a></h3><p>Flow for the credit cards may vary between providers, nevertheless there is a general rule: asynchronous payment flow applies also in this case. Because there is always additional data to be sent, like one time tokens, hash and other security solutions.</p><p>Sometimes the external authorization is needed and the external gateway can be used, or a popup to interact with payment provider.</p><p>However, if there are no plugin-specific endpoints to interact with, the <code>handlePayment</code> method (or <code>/store-api/handle-payment</code> endpoint) is always a good choice.</p><hr><p>See what can be achieved on Express Checkout example for PayPal provider.</p>',21),l=JSON.parse('{"title":"Payments","description":"","frontmatter":{"head":[["meta",{"name":"og:title","content":"Payments"}],["meta",{"name":"og:description","content":"In this chapter you will learn how to integrate payments."}],["meta",{"name":"og:image","content":"https://frontends-og-image.vercel.app/Working%20with%20**Payments**.png"}]]},"headers":[{"level":2,"title":"Synchronous Payment","slug":"synchronous-payment","link":"#synchronous-payment","children":[]},{"level":2,"title":"Asynchronous Payment","slug":"asynchronous-payment","link":"#asynchronous-payment","children":[{"level":3,"title":"External gateway","slug":"external-gateway","link":"#external-gateway","children":[]},{"level":3,"title":"Credit cards","slug":"credit-cards","link":"#credit-cards","children":[]}]}],"relativePath":"getting-started/e-commerce/payments.md","filePath":"getting-started/e-commerce/payments.md"}'),p={name:"getting-started/e-commerce/payments.md"},r=Object.assign(p,{setup:n=>(n,l)=>{const p=o("PageRef");return s(),e("div",null,[t,a(p,{page:"custom-payment",title:"Custom Payment with PayPal",sub:"Custom payment flow based on PayPal Express Checkout."})])}});export{l as __pageData,r as default};
