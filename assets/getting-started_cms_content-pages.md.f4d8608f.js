import{_ as e,k as a,F as t,$ as o,W as n,V as s,H as c,M as l}from"./chunks/framework.e8799e72.js";const p=JSON.parse('{"title":"Create content pages","description":"","frontmatter":{"head":[["meta",{"name":"og:title","content":"Building the content pages"}],["meta",{"name":"og:description","content":"In this chapter you will learn how to create a content page and use CMS elements."}],["meta",{"name":"og:image","content":"https://frontends-og-image.vercel.app/Building%20the%20**Content%20Pages**.png?fontSize=120px"}]],"nav":{"position":30}},"headers":[{"level":2,"title":"Use the cms-base package","slug":"use-the-cms-base-package","link":"#use-the-cms-base-package","children":[{"level":3,"title":"Install the package","slug":"install-the-package","link":"#install-the-package","children":[]},{"level":3,"title":"Render the page","slug":"render-the-page","link":"#render-the-page","children":[]},{"level":3,"title":"Customize components","slug":"customize-components","link":"#customize-components","children":[]}]},{"level":2,"title":"Use custom components","slug":"use-custom-components","link":"#use-custom-components","children":[]}],"relativePath":"getting-started/cms/content-pages.md","filePath":"getting-started/cms/content-pages.md"}'),r={name:"getting-started/cms/content-pages.md"},i=n('<h1 id="create-content-pages" tabindex="-1">Create content pages <a class="header-anchor" href="#create-content-pages" aria-label="Permalink to &quot;Create content pages&quot;">​</a></h1><p>In this chapter you will learn how to display content pages with data from Shopware&#39;s own CMS. It is based on the mechanism of routing and fetching page content described in the <a href="./../routing.html">previous chapter</a>. The case of building fully custom components from scratch will be covered as well. Specifically, you will learn how to</p><ul><li>Render a content page using the cms-base package</li><li>Render a content page using custom components</li></ul><h2 id="use-the-cms-base-package" tabindex="-1">Use the cms-base package <a class="header-anchor" href="#use-the-cms-base-package" aria-label="Permalink to &quot;Use the cms-base package&quot;">​</a></h2><p>Using the cms-base package, you don&#39;t have to implement any CMS components by yourself. You can start with a working implementation but add and override single components as you need. It requires a couple dependencies for styling and validation purposes to work properly.</p><h3 id="install-the-package" tabindex="-1">Install the package <a class="header-anchor" href="#install-the-package" aria-label="Permalink to &quot;Install the package&quot;">​</a></h3><p>Depending on which template you are using you need to install the package first.<br> See <a href="./../../framework/shopping-experiences.html#install-the-package">install the package</a>.</p><h3 id="render-the-page" tabindex="-1">Render the page <a class="header-anchor" href="#render-the-page" aria-label="Permalink to &quot;Render the page&quot;">​</a></h3><p>Now, you can import all components from the <code>@shopware-pwa/cms-base</code> package and use them in your templates. The most straightforward way to render a page is to use the <code>CmsPage</code> component. It takes a <code>content</code> prop and resolves all subordinate sections, blocks and elements automatically. Put the following code in your catch-all component that also handles the <a href="./../routing.html#resolve-a-route-to-a-page">routing logic</a>.</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">CmsPage</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-if</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">content</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">cmsPage</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>\n<span class="line"></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">This will only work</p><p>if you followed the previous chapter on <a href="./../routing.html">routing</a>. The <code>data</code> value in this example is a reactive reference to either a product, a category or a landing page response. If you are not sure how to get the data otherwise, check that chapter and see how the data is fetched.</p></div><h3 id="customize-components" tabindex="-1">Customize components <a class="header-anchor" href="#customize-components" aria-label="Permalink to &quot;Customize components&quot;">​</a></h3><p>The <code>cms-base</code> package has an opinionated style of components and is based on Tailwind.css. If you want to override components or add custom ones, you can build them right into your project or import them as a separate package.</p>',13),h=s("h2",{id:"use-custom-components",tabindex:"-1"},[c("Use custom components "),s("a",{class:"header-anchor",href:"#use-custom-components","aria-label":'Permalink to "Use custom components"'},"​")],-1),m=s("p",null,[c("If you use custom components and not the cms-base package, you have to ensure the correct rendering of the page. You also need to re-create all components that the Shopware CMS uses. For the creation of custom components - such as elements or blocks, you can follow the instructions given in "),s("a",{href:"./../../framework/shopping-experiences.html"},"Shopping Experiences"),c(" and benefit from typehinting and the "),s("code",null,"useCms*"),c(" composables.")],-1);const u=e(r,[["render",function(e,n,s,c,p,r){const u=l("PageRef");return a(),t("div",null,[i,o(u,{page:"customize-components",title:"Customize Components",sub:"Customize CMS components (Shopping Experiences)"}),h,m])}]]);export{p as __pageData,u as default};
