import{_ as s,k as e,F as a,$ as n,W as o,M as l}from"./chunks/framework.7ea3a455.js";const t=JSON.parse('{"title":"Error Handling: API Client","description":"","frontmatter":{"head":[["meta",{"name":"og:title","content":"Error Handling: API Client"}],["meta",{"name":"og:description","content":"Example how to handle API errors with the API Client."}],["meta",{"name":"og:image","content":"https://frontends-og-image.vercel.app/Error handling: **API Client**.png?fontSize=110px"}]],"nav":{"position":40}},"headers":[{"level":2,"title":"Overview","slug":"overview","link":"#overview","children":[{"level":3,"title":"Structure","slug":"structure","link":"#structure","children":[]}]},{"level":2,"title":"Example (Vue page/template)","slug":"example-vue-page-template","link":"#example-vue-page-template","children":[]}],"relativePath":"best-practices/error-handling/api-client-error-handling.md","filePath":"best-practices/error-handling/api-client-error-handling.md"}'),p={name:"best-practices/error-handling/api-client-error-handling.md"},r=o('<h1 id="error-handling-api-client" tabindex="-1">Error Handling: API Client <a class="header-anchor" href="#error-handling-api-client" aria-label="Permalink to &quot;Error Handling: API Client&quot;">​</a></h1><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Deprecated. This doc is based on the old API client.</p></div><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>The api-client is a separate package located at <code>packages/api-client</code> and it uses <a href="https://axios-http.com/" target="_blank" rel="noreferrer">axios</a> internally. There is an <code>errorInterceptor</code> (see <a href="https://axios-http.com/docs/interceptors" target="_blank" rel="noreferrer">axios interceptors</a>) used inside the <code>apiService</code> that intercept the response we get returned from our requests. So we extend the default <code>AxiosError</code> with more specific <code>ShopwareError</code> messages.</p><p>When there is an error returend from a request you can expect at least the following fields: <code>message</code>, <code>code</code> and <code>errors</code> (containing an array with one or multiple <code>ShopwareError</code> objects). You can find the type definition at <code>packages/types/shopware-6-client/errors/ApiError.d.ts</code>.</p><h3 id="structure" tabindex="-1">Structure <a class="header-anchor" href="#structure" aria-label="Permalink to &quot;Structure&quot;">​</a></h3><p>Let&#39;s say we want to use the <code>getCustomerRegisterEndpoint</code> which points to <code>/store-api/account/register</code>. These function is used inside the <code>customerService</code> by an async function called <code>register</code> and returning a promise with an Customer object. Further the <code>register</code> function is used inside a composable called <code>useUser()</code>. There is also a function called <code>register</code> that is wrapping the <code>register</code> function from the API client. When you now look at the <code>register.vue</code> page inside the vue-demo-store implementation, you will see, that the submit of the form is invoked.</p><p><strong>So the way is like this:</strong><br> API client Endpoint (TS) <strong>&gt;</strong> API client Service (TS) <strong>&gt;</strong> Composable (TS) <strong>&gt;</strong> Vue</p><h2 id="example-vue-page-template" tabindex="-1">Example (Vue page/template) <a class="header-anchor" href="#example-vue-page-template" aria-label="Permalink to &quot;Example (Vue page/template)&quot;">​</a></h2><p>Look at this <code>invokeSubmit</code> function from <code>templates/vue-demo-store/pages/register.vue</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">    const </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> register </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> = useUser();</span></span>\n<span class="line"><span style="color:#A6ACCD;">    const </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> pushError </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> = useNotifications();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">    //... content reduced</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">    const invokeSubmit = async () =&gt; </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    $v</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">$touch</span><span style="color:#A6ACCD;">();</span></span>\n<span class="line"><span style="color:#A6ACCD;">    const valid </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> $v</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">$validate</span><span style="color:#A6ACCD;">();</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">if</span><span style="color:#A6ACCD;"> (valid) </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">        try {</span></span>\n<span class="line"><span style="color:#A6ACCD;">            loading.value </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">            const response </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">register</span><span style="color:#A6ACCD;">(state);</span></span>\n<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F07178;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">response</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> router.</span><span style="color:#F07178;">push</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">catch</span><span style="color:#A6ACCD;"> (error) </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">            let message </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> (error </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ClientApiError</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">?.</span><span style="color:#A6ACCD;">messages</span><span style="color:#89DDFF;">?.</span><span style="color:#A6ACCD;">[</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">?.</span><span style="color:#A6ACCD;">detail </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Something went wrong, please try again later</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F07178;">pushError</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">message</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> finally </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">            loading.value </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">    };</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">    //... content reduced</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre></div><p>Before some request is sent the form get&#39;s validated and if it is valid, we will send the register request. The <code>await register(state);</code> part is coming from the composable <code>useUser()</code>, you see at the top of the script setup. So the request is surrounded by a try/catch/finally (see also <a href="https://axios-http.com/docs/handling_errors" target="_blank" rel="noreferrer">axios errors handling</a>) so it is possible to react if there is some error coming back from the request. If we got an error we will push a message to a composable called <code>useNotifications()</code> that will display a nice message to the user of the website.</p><p><strong>API Client Reference</strong></p>',13);const c=s(p,[["render",function(s,o,t,p,c,i){const D=l("PageRef");return e(),a("div",null,[r,n(D,{page:"../../packages/api-client",title:"API Client Reference",sub:"Package reference with all services"})])}]]);export{t as __pageData,c as default};
