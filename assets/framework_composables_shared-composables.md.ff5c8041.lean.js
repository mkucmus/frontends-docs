import{_ as s,k as a,F as o,W as n}from"./chunks/framework.e8799e72.js";const e=JSON.parse('{"title":"Shared composables","description":"","frontmatter":{},"headers":[{"level":2,"title":"How do I know which one is shared and what should I do with that?","slug":"how-do-i-know-which-one-is-shared-and-what-should-i-do-with-that","link":"#how-do-i-know-which-one-is-shared-and-what-should-i-do-with-that","children":[]},{"level":2,"title":"Overwrite/extend shared composable","slug":"overwrite-extend-shared-composable","link":"#overwrite-extend-shared-composable","children":[]}],"relativePath":"framework/composables/shared-composables.md","filePath":"framework/composables/shared-composables.md"}'),l={name:"framework/composables/shared-composables.md"},t=[n('<h1 id="shared-composables" tabindex="-1">Shared composables <a class="header-anchor" href="#shared-composables" aria-label="Permalink to &quot;Shared composables&quot;">​</a></h1><p>Using composable in a component can be imagined as copying all the code from that into that component, without the actual need to do so. This way we can reuse logic in a clean way. We need to remember, that every computed property/state is then replicated, so if we have multiple components using specific composable - we duplicate that in memory.</p><p>Sometimes we want only one instance of a specific composable to be shared between all components. This is where shared composables come in. They are just regular composables, but there is always one instance in the system.</p><p>Example: <code>useCart</code> is composable which contains cart information, like items inside, count or totalPrice details. We want to use it in multiple components, but we don&#39;t want to duplicate the data in memory. This is a perfect use case for shared composable.</p><h2 id="how-do-i-know-which-one-is-shared-and-what-should-i-do-with-that" tabindex="-1">How do I know which one is shared and what should I do with that? <a class="header-anchor" href="#how-do-i-know-which-one-is-shared-and-what-should-i-do-with-that" aria-label="Permalink to &quot;How do I know which one is shared and what should I do with that?&quot;">​</a></h2><p>We&#39;re adding information that the composable is shared into the description with a link to this documentation page. There is no need to do anything with this information. The only difference is in <a href="./overwriting-composables.html">overwriting</a></p><h2 id="overwrite-extend-shared-composable" tabindex="-1">Overwrite/extend shared composable <a class="header-anchor" href="#overwrite-extend-shared-composable" aria-label="Permalink to &quot;Overwrite/extend shared composable&quot;">​</a></h2><p>Typically you extend shared composable by using the same core composable. In the case of shared composables you need to take <code>useXXFunction</code> to extend it.</p><p>Example:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">useCartFunction</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@shopware-pwa/composables-next</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createSharedComposable</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@vueuse/core</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">myUseCart</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">coreCartFunctions</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">useCartFunction</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// extend the core functions</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">myCustomFunction</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// do something</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">coreCartFunctions</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">myCustomFunction</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">};</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> useCart </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createSharedComposable</span><span style="color:#A6ACCD;">(myUseCart)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// or skip `createSharedComposable` if you don&#39;t want it to be a shared composable anymore</span></span>\n<span class="line"></span></code></pre></div>',10)];const p=s(l,[["render",function(s,n,e,l,p,c){return a(),o("div",null,t)}]]);export{e as __pageData,p as default};
